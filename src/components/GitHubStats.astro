---
// Importacion de Octokit
import { Octokit } from "@octokit/rest";
// Importacion de componentes para crear gráficos.
import LanguageChart from './LanguageChart.jsx';

// Interface de objeto UserData
interface UserData {
  login: string;
  id: number;
  avatar_url: string;
  name: string;
  public_repos: number;
  followers: number;
  following: number;
  [key: string]: any; // Para permitir propiedades adicionales
}

// Definición de la interfaz para las estadísticas
interface UserStats {
  label: string;
  value: number;
}

// Definición del objeto que retorna la función
interface UserFetchResult {
  stats: UserStats[];
}

// Función asíncrona para obtener datos de GitHub
async function fetchGitHubData() {

  // Instancia de cliente `Octokit` para interactuar con la API de GitHub
  const octokit = new Octokit({auth: import.meta.env.KEY_GITHUB});

  // V. nombre de usuario utilizada para obtener data a través de octokit
  const username = "lmxti";

  // V. que almacena la data obtenida
  let userData;
  // V. total de Stars de usuario
  let totalStars = 0;
  // V. de lenagujes de programacion de los repositorios
  let languageStats: { [key: string]: number } = {};

  try {
    // Solicitud a la API de GitHub para obtener detalles del usuario `username`
    const { data } = await octokit.rest.users.getByUsername({ username });
    userData = data;
    
    // Solicitud a la API de GitHub para botener lista de repositorios públicos del usuario `username`
    const { data: repos } = await octokit.rest.repos.listForUser({ username, per_page: 100});
    

    // Cálculo de números totales de `Stars` (Estrellas) que han recibido los repositorios del usuario `username`
    totalStars = repos.reduce((sum, repo) => sum + (repo.stargazers_count ?? 0), 0);

    for (const repo of repos) {
      if (repo.language) {
        languageStats[repo.language] = (languageStats[repo.language] || 0) + 1;
      }
    }
  
  } catch (error) {
    console.error("Error fetching GitHub data:", error);
    userData = null;
    totalStars = 0;
  }

  const languageData = Object.entries(languageStats).map(([language, count]) => ({
      name: language,
      value: count,
  }));

  return {
    stats: [
      { label: "Repositorios", value: userData?.public_repos || 0 },
      { label: "Stars", value: totalStars },
      { label: "Seguidores", value: userData?.followers || 0 },
      { label: "Seguidos", value: userData?.following || 0 },
    ],
    languageData
  };
}

const { stats, languageData  } = await fetchGitHubData();
---

<section class='bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg'>
  <h3 class='text-2xl font-bold mb-6 text-gray-800 dark:text-white text-center'>Estadisticas GitHub</h3>
  <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6"> 
      <!-- Numeros de perfil -->
        {
          stats.map((stat) => (
            <div class="bg-gray-100 dark:bg-gray-700 p-4 rounded-md shadow text-center">
              <span class="block text-2xl font-bold text-gray-900 dark:text-gray-100">
                {stat.value}
              </span>
              <span class="text-sm text-gray-600 dark:text-gray-400">
                {stat.label}
              </span>
            </div>
          ))
        }
  </div>
  <!-- Estadisticas de perfil -->
  <h3 class='text-xl font-bold mb-6 text-gray-800 dark:text-white text-start'>Lenguajes utilizados</h3>
  <LanguageChart client:load languageData={languageData} />
</section>
